c687bfd546074c0f16c6a8938cfc5344
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../../../../modules/Shared/domain/Command");
const CommandNotRegisteredError_1 = require("../../../../../modules/Shared/domain/CommandNotRegisteredError");
const CommandHandlersInformation_1 = require("../../../../../modules/Shared/infrastructure/CommandBus/CommandHandlersInformation");
const InMemoryCommandBus_1 = require("../../../../../modules/Shared/infrastructure/CommandBus/InMemoryCommandBus");
class UnhandledCommand extends Command_1.Command {
}
UnhandledCommand.COMMAND_NAME = "unhandled.command";
class HandledCommand extends Command_1.Command {
}
HandledCommand.COMMAND_NAME = "handled.command";
class MyCommandHandler {
    subscribedTo() {
        return HandledCommand;
    }
    handle(command) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}
describe("InMemoryCommandBus", () => {
    it("throws an error if dispatches a command without handler", () => __awaiter(void 0, void 0, void 0, function* () {
        const unhandledCommand = new UnhandledCommand();
        const commandHandlersInformation = new CommandHandlersInformation_1.CommandHandlersInformation([]);
        const commandBus = new InMemoryCommandBus_1.InMemoryCommandBus(commandHandlersInformation);
        let exception = null;
        try {
            yield commandBus.dispatch(unhandledCommand);
        }
        catch (error) {
            exception = error;
        }
        expect(exception).toBeInstanceOf(CommandNotRegisteredError_1.CommandNotRegisteredError);
        expect(exception.message).toBe(`The command <UnhandledCommand> hasn't a command handler associated`);
    }));
    it("accepts a command with handler", () => __awaiter(void 0, void 0, void 0, function* () {
        const handledCommand = new HandledCommand();
        const myCommandHandler = new MyCommandHandler();
        const commandHandlersInformation = new CommandHandlersInformation_1.CommandHandlersInformation([myCommandHandler]);
        const commandBus = new InMemoryCommandBus_1.InMemoryCommandBus(commandHandlersInformation);
        console.log("*******************************************");
        console.log(commandBus);
        console.log("*******************************************");
        yield commandBus.dispatch(handledCommand);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkL0RvY3VtZW50cy9iYW5rLWF1dGgvc3JjL3Rlc3RzL0NvbnRleHRzL1NoYXJlZC9pbmZyYXN0cnVjdHVyZS9Db21tYW5kQnVzL0luTWVtb3J5Q29tbWFuZEJ1cy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsMEVBQXVFO0FBRXZFLDhHQUEyRztBQUMzRyxtSUFBZ0k7QUFDaEksbUhBQWdIO0FBRWhILE1BQU0sZ0JBQWlCLFNBQVEsaUJBQU87O0FBQzdCLDZCQUFZLEdBQUcsbUJBQW1CLENBQUM7QUFHNUMsTUFBTSxjQUFlLFNBQVEsaUJBQU87O0FBQzNCLDJCQUFZLEdBQUcsaUJBQWlCLENBQUM7QUFHMUMsTUFBTSxnQkFBZ0I7SUFDcEIsWUFBWTtRQUNWLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFSyxNQUFNLENBQUMsT0FBdUI7OERBQWtCLENBQUM7S0FBQTtDQUN4RDtBQUVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEdBQVMsRUFBRTtRQUN2RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRCxNQUFNLDBCQUEwQixHQUFHLElBQUksdURBQTBCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxVQUFVLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRXRFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUVyQixJQUFJO1lBQ0YsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDN0M7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDbkI7UUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsY0FBYyxDQUFDLHFEQUF5QixDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsb0VBQW9FLENBQUMsQ0FBQztJQUN2RyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQVMsRUFBRTtRQUM5QyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hELE1BQU0sMEJBQTBCLEdBQUcsSUFBSSx1REFBMEIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUN0RixNQUFNLFVBQVUsR0FBRyxJQUFJLHVDQUFrQixDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFBO1FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFBO1FBRTFELE1BQU0sVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2RhdmlkL0RvY3VtZW50cy9iYW5rLWF1dGgvc3JjL3Rlc3RzL0NvbnRleHRzL1NoYXJlZC9pbmZyYXN0cnVjdHVyZS9Db21tYW5kQnVzL0luTWVtb3J5Q29tbWFuZEJ1cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9TaGFyZWQvZG9tYWluL0NvbW1hbmRcIjtcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvU2hhcmVkL2RvbWFpbi9Db21tYW5kSGFuZGxlclwiO1xuaW1wb3J0IHsgQ29tbWFuZE5vdFJlZ2lzdGVyZWRFcnJvciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL1NoYXJlZC9kb21haW4vQ29tbWFuZE5vdFJlZ2lzdGVyZWRFcnJvclwiO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24gfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9TaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvQ29tbWFuZEJ1cy9Db21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvblwiO1xuaW1wb3J0IHsgSW5NZW1vcnlDb21tYW5kQnVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvU2hhcmVkL2luZnJhc3RydWN0dXJlL0NvbW1hbmRCdXMvSW5NZW1vcnlDb21tYW5kQnVzXCI7XG5cbmNsYXNzIFVuaGFuZGxlZENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgc3RhdGljIENPTU1BTkRfTkFNRSA9IFwidW5oYW5kbGVkLmNvbW1hbmRcIjtcbn1cblxuY2xhc3MgSGFuZGxlZENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgc3RhdGljIENPTU1BTkRfTkFNRSA9IFwiaGFuZGxlZC5jb21tYW5kXCI7XG59XG5cbmNsYXNzIE15Q29tbWFuZEhhbmRsZXIgaW1wbGVtZW50cyBDb21tYW5kSGFuZGxlcjxIYW5kbGVkQ29tbWFuZD4ge1xuICBzdWJzY3JpYmVkVG8oKTogSGFuZGxlZENvbW1hbmQge1xuICAgIHJldHVybiBIYW5kbGVkQ29tbWFuZDtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZShjb21tYW5kOiBIYW5kbGVkQ29tbWFuZCk6IFByb21pc2U8dm9pZD4ge31cbn1cblxuZGVzY3JpYmUoXCJJbk1lbW9yeUNvbW1hbmRCdXNcIiwgKCkgPT4ge1xuICBpdChcInRocm93cyBhbiBlcnJvciBpZiBkaXNwYXRjaGVzIGEgY29tbWFuZCB3aXRob3V0IGhhbmRsZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVuaGFuZGxlZENvbW1hbmQgPSBuZXcgVW5oYW5kbGVkQ29tbWFuZCgpO1xuICAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uID0gbmV3IENvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uKFtdKTtcbiAgICBjb25zdCBjb21tYW5kQnVzID0gbmV3IEluTWVtb3J5Q29tbWFuZEJ1cyhjb21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvbik7XG5cbiAgICBsZXQgZXhjZXB0aW9uID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjb21tYW5kQnVzLmRpc3BhdGNoKHVuaGFuZGxlZENvbW1hbmQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBleGNlcHRpb24gPSBlcnJvcjtcbiAgICB9XG5cbiAgICBleHBlY3QoZXhjZXB0aW9uKS50b0JlSW5zdGFuY2VPZihDb21tYW5kTm90UmVnaXN0ZXJlZEVycm9yKTtcbiAgICBleHBlY3QoZXhjZXB0aW9uLm1lc3NhZ2UpLnRvQmUoYFRoZSBjb21tYW5kIDxVbmhhbmRsZWRDb21tYW5kPiBoYXNuJ3QgYSBjb21tYW5kIGhhbmRsZXIgYXNzb2NpYXRlZGApO1xuICB9KTtcblxuICBpdChcImFjY2VwdHMgYSBjb21tYW5kIHdpdGggaGFuZGxlclwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlZENvbW1hbmQgPSBuZXcgSGFuZGxlZENvbW1hbmQoKTtcbiAgICBjb25zdCBteUNvbW1hbmRIYW5kbGVyID0gbmV3IE15Q29tbWFuZEhhbmRsZXIoKTtcbiAgICBjb25zdCBjb21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvbiA9IG5ldyBDb21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvbihbbXlDb21tYW5kSGFuZGxlcl0pO1xuICAgIGNvbnN0IGNvbW1hbmRCdXMgPSBuZXcgSW5NZW1vcnlDb21tYW5kQnVzKGNvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uKTtcblxuICAgIGNvbnNvbGUubG9nKFwiKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlwiKVxuICAgIGNvbnNvbGUubG9nKGNvbW1hbmRCdXMpXG4gICAgY29uc29sZS5sb2coXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIpXG5cbiAgICBhd2FpdCBjb21tYW5kQnVzLmRpc3BhdGNoKGhhbmRsZWRDb21tYW5kKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==