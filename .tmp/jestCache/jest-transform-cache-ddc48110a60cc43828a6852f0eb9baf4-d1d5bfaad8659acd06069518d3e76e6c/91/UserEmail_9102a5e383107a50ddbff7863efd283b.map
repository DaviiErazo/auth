{"file":"/Users/david/Documents/bank-auth/src/modules/Users/domain/UserEmail.ts","mappings":";;;AAAA,gGAA6F;AAC7F,0FAAuF;AAEvF,MAAa,SAAU,SAAQ,qCAAiB;IAC5C,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,kBAAkB,CAAC,KAAa;QACpC,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YAC5B,MAAM,IAAI,2CAAoB,CAAC,mBAAmB,KAAK,cAAc,CAAC,CAAC;SAC1E;IACL,CAAC;IAEO,cAAc,CAAC,KAAa;QAChC,IAAI,EAAE,GACF,wJAAwJ,CAAC;QAC7J,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;CACJ;AAjBD,8BAiBC","names":[],"sources":["/Users/david/Documents/bank-auth/src/modules/Users/domain/UserEmail.ts"],"sourcesContent":["import { InvalidArgumentError } from \"../../Shared/domain/value-object/InvalidArgumentError\";\nimport { StringValueObject } from \"../../Shared/domain/value-object/StringValueObject\";\n\nexport class UserEmail extends StringValueObject {\n    constructor(email: string) {\n        super(email);\n        this.ensureEmailIsValid(email);\n    }\n\n    private ensureEmailIsValid(email: string): void {\n        if (this.isInvalidEmail(email)) {\n            throw new InvalidArgumentError(`The User Email <${email}> is invalid`);\n        }\n    }\n\n    private isInvalidEmail(email: string) {\n        var re =\n            /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return !re.test(email);\n    }\n}"],"version":3}