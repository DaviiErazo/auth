707618695a26be86090fc995f857fc2a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../../../../modules/Shared/domain/Command");
// import { CommandHandler } from "../../../../../modules/Shared/domain/CommandHandler";
const CommandNotRegisteredError_1 = require("../../../../../modules/Shared/domain/CommandNotRegisteredError");
const CommandHandlersInformation_1 = require("../../../../../modules/Shared/infrastructure/CommandBus/CommandHandlersInformation");
const InMemoryCommandBus_1 = require("../../../../../modules/Shared/infrastructure/CommandBus/InMemoryCommandBus");
// import { CreateUserCommand } from "../../../../../modules/Users/application/Create/CreateUserCommand";
const CreateUserCommandHandler_1 = require("../../../../../modules/Users/application/Create/CreateUserCommandHandler");
const UserCreator_1 = require("../../../../../modules/Users/application/Create/UserCreator");
class UnhandledCommand extends Command_1.Command {
}
UnhandledCommand.COMMAND_NAME = "unhandled.command";
class HandledCommand extends Command_1.Command {
}
HandledCommand.COMMAND_NAME = "handled.command";
/*

class MyCommandHandler implements CommandHandler<HandledCommand> {
  subscribedTo(): HandledCommand {
    return HandledCommand;
  }

  async handle(command: HandledCommand): Promise<void> {}
}
*/
describe("InMemoryCommandBus", () => {
    it("throws an error if dispatches a command without handler", () => __awaiter(void 0, void 0, void 0, function* () {
        const unhandledCommand = new UnhandledCommand();
        const commandHandlersInformation = new CommandHandlersInformation_1.CommandHandlersInformation([]);
        const commandBus = new InMemoryCommandBus_1.InMemoryCommandBus(commandHandlersInformation);
        let exception = null;
        try {
            yield commandBus.dispatch(unhandledCommand);
        }
        catch (error) {
            exception = error;
        }
        expect(exception).toBeInstanceOf(CommandNotRegisteredError_1.CommandNotRegisteredError);
        expect(exception.message).toBe(`The command <UnhandledCommand> hasn't a command handler associated`);
    }));
    it("accepts a command with handler", () => __awaiter(void 0, void 0, void 0, function* () {
        const handledCommand = new HandledCommand();
        const userCreator = new UserCreator_1.UserCreator();
        const myCommandHandler = new CreateUserCommandHandler_1.CreateUserCommandHandler(userCreator);
        const commandHandlersInformation = new CommandHandlersInformation_1.CommandHandlersInformation([myCommandHandler]);
        const commandBus = new InMemoryCommandBus_1.InMemoryCommandBus(commandHandlersInformation);
        console.log("*******************************************");
        console.log(commandBus);
        console.log("*******************************************");
        yield commandBus.dispatch(handledCommand);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkL0RvY3VtZW50cy9iYW5rLWF1dGgvc3JjL3Rlc3RzL0NvbnRleHRzL1NoYXJlZC9pbmZyYXN0cnVjdHVyZS9Db21tYW5kQnVzL0luTWVtb3J5Q29tbWFuZEJ1cy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsMEVBQXVFO0FBQ3ZFLHdGQUF3RjtBQUN4Riw4R0FBMkc7QUFDM0csbUlBQWdJO0FBQ2hJLG1IQUFnSDtBQUNoSCx5R0FBeUc7QUFDekcsdUhBQW9IO0FBQ3BILDZGQUEwRjtBQUUxRixNQUFNLGdCQUFpQixTQUFRLGlCQUFPOztBQUM3Qiw2QkFBWSxHQUFHLG1CQUFtQixDQUFDO0FBRzVDLE1BQU0sY0FBZSxTQUFRLGlCQUFPOztBQUMzQiwyQkFBWSxHQUFHLGlCQUFpQixDQUFDO0FBRTFDOzs7Ozs7Ozs7RUFTRTtBQUNGLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEdBQVMsRUFBRTtRQUN2RSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRCxNQUFNLDBCQUEwQixHQUFHLElBQUksdURBQTBCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxVQUFVLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRXRFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUVyQixJQUFJO1lBQ0YsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDN0M7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDbkI7UUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsY0FBYyxDQUFDLHFEQUF5QixDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsb0VBQW9FLENBQUMsQ0FBQztJQUN2RyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQVMsRUFBRTtRQUM5QyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzVDLE1BQU0sV0FBVyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFBO1FBQ3JDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxtREFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRSxNQUFNLDBCQUEwQixHQUFHLElBQUksdURBQTBCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDdEYsTUFBTSxVQUFVLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRXRFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQTtRQUMxRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQTtRQUUxRCxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9Eb2N1bWVudHMvYmFuay1hdXRoL3NyYy90ZXN0cy9Db250ZXh0cy9TaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvQ29tbWFuZEJ1cy9Jbk1lbW9yeUNvbW1hbmRCdXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvU2hhcmVkL2RvbWFpbi9Db21tYW5kXCI7XG4vLyBpbXBvcnQgeyBDb21tYW5kSGFuZGxlciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL1NoYXJlZC9kb21haW4vQ29tbWFuZEhhbmRsZXJcIjtcbmltcG9ydCB7IENvbW1hbmROb3RSZWdpc3RlcmVkRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9TaGFyZWQvZG9tYWluL0NvbW1hbmROb3RSZWdpc3RlcmVkRXJyb3JcIjtcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvU2hhcmVkL2luZnJhc3RydWN0dXJlL0NvbW1hbmRCdXMvQ29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb25cIjtcbmltcG9ydCB7IEluTWVtb3J5Q29tbWFuZEJ1cyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL1NoYXJlZC9pbmZyYXN0cnVjdHVyZS9Db21tYW5kQnVzL0luTWVtb3J5Q29tbWFuZEJ1c1wiO1xuLy8gaW1wb3J0IHsgQ3JlYXRlVXNlckNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9Vc2Vycy9hcHBsaWNhdGlvbi9DcmVhdGUvQ3JlYXRlVXNlckNvbW1hbmRcIjtcbmltcG9ydCB7IENyZWF0ZVVzZXJDb21tYW5kSGFuZGxlciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9tb2R1bGVzL1VzZXJzL2FwcGxpY2F0aW9uL0NyZWF0ZS9DcmVhdGVVc2VyQ29tbWFuZEhhbmRsZXJcIjtcbmltcG9ydCB7IFVzZXJDcmVhdG9yIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvVXNlcnMvYXBwbGljYXRpb24vQ3JlYXRlL1VzZXJDcmVhdG9yXCI7XG5cbmNsYXNzIFVuaGFuZGxlZENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgc3RhdGljIENPTU1BTkRfTkFNRSA9IFwidW5oYW5kbGVkLmNvbW1hbmRcIjtcbn1cblxuY2xhc3MgSGFuZGxlZENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgc3RhdGljIENPTU1BTkRfTkFNRSA9IFwiaGFuZGxlZC5jb21tYW5kXCI7XG59XG4vKlxuXG5jbGFzcyBNeUNvbW1hbmRIYW5kbGVyIGltcGxlbWVudHMgQ29tbWFuZEhhbmRsZXI8SGFuZGxlZENvbW1hbmQ+IHtcbiAgc3Vic2NyaWJlZFRvKCk6IEhhbmRsZWRDb21tYW5kIHtcbiAgICByZXR1cm4gSGFuZGxlZENvbW1hbmQ7XG4gIH1cblxuICBhc3luYyBoYW5kbGUoY29tbWFuZDogSGFuZGxlZENvbW1hbmQpOiBQcm9taXNlPHZvaWQ+IHt9XG59XG4qL1xuZGVzY3JpYmUoXCJJbk1lbW9yeUNvbW1hbmRCdXNcIiwgKCkgPT4ge1xuICBpdChcInRocm93cyBhbiBlcnJvciBpZiBkaXNwYXRjaGVzIGEgY29tbWFuZCB3aXRob3V0IGhhbmRsZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVuaGFuZGxlZENvbW1hbmQgPSBuZXcgVW5oYW5kbGVkQ29tbWFuZCgpO1xuICAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uID0gbmV3IENvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uKFtdKTtcbiAgICBjb25zdCBjb21tYW5kQnVzID0gbmV3IEluTWVtb3J5Q29tbWFuZEJ1cyhjb21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvbik7XG5cbiAgICBsZXQgZXhjZXB0aW9uID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjb21tYW5kQnVzLmRpc3BhdGNoKHVuaGFuZGxlZENvbW1hbmQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBleGNlcHRpb24gPSBlcnJvcjtcbiAgICB9XG5cbiAgICBleHBlY3QoZXhjZXB0aW9uKS50b0JlSW5zdGFuY2VPZihDb21tYW5kTm90UmVnaXN0ZXJlZEVycm9yKTtcbiAgICBleHBlY3QoZXhjZXB0aW9uLm1lc3NhZ2UpLnRvQmUoYFRoZSBjb21tYW5kIDxVbmhhbmRsZWRDb21tYW5kPiBoYXNuJ3QgYSBjb21tYW5kIGhhbmRsZXIgYXNzb2NpYXRlZGApO1xuICB9KTtcblxuICBpdChcImFjY2VwdHMgYSBjb21tYW5kIHdpdGggaGFuZGxlclwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlZENvbW1hbmQgPSBuZXcgSGFuZGxlZENvbW1hbmQoKTtcbiAgICBjb25zdCB1c2VyQ3JlYXRvciA9IG5ldyBVc2VyQ3JlYXRvcigpXG4gICAgY29uc3QgbXlDb21tYW5kSGFuZGxlciA9IG5ldyBDcmVhdGVVc2VyQ29tbWFuZEhhbmRsZXIodXNlckNyZWF0b3IpO1xuICAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uID0gbmV3IENvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uKFtteUNvbW1hbmRIYW5kbGVyXSk7XG4gICAgY29uc3QgY29tbWFuZEJ1cyA9IG5ldyBJbk1lbW9yeUNvbW1hbmRCdXMoY29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24pO1xuXG4gICAgY29uc29sZS5sb2coXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIpXG4gICAgY29uc29sZS5sb2coY29tbWFuZEJ1cylcbiAgICBjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcIilcblxuICAgIGF3YWl0IGNvbW1hbmRCdXMuZGlzcGF0Y2goaGFuZGxlZENvbW1hbmQpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9