de68ef25dc8e0fdf7f577c2a862eb410
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateUserCommandHandler = void 0;
const CreateUserCommand_1 = require("./CreateUserCommand");
const UserId_1 = require("../../Shared/domain/UserId");
const UserName_1 = require("../../domain/UserName");
const UserPassword_1 = require("../../domain/UserPassword");
const UserEmail_1 = require("../../domain/UserEmail");
class CreateUserCommandHandler {
    constructor(userCreator) {
        this.userCreator = userCreator;
    }
    subscribedTo() {
        return CreateUserCommand_1.CreateUserCommand;
    }
    handle(command) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = new UserId_1.UserId(command.id);
            const name = new UserName_1.UserName(command.name);
            const password = new UserPassword_1.UserPassword(command.password);
            const email = new UserEmail_1.UserEmail(command.email);
            yield this.userCreator.run({
                id,
                name,
                password,
                email,
            });
        });
    }
}
exports.CreateUserCommandHandler = CreateUserCommandHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2RhdmlkL0RvY3VtZW50cy9iYW5rLWF1dGgvc3JjL21vZHVsZXMvVXNlcnMvYXBwbGljYXRpb24vQ3JlYXRlL0NyZWF0ZVVzZXJDb21tYW5kSGFuZGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwyREFBd0Q7QUFLeEQsdURBQW9EO0FBQ3BELG9EQUFpRDtBQUNqRCw0REFBeUQ7QUFDekQsc0RBQW1EO0FBRW5ELE1BQWEsd0JBQXdCO0lBQ25DLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUcsQ0FBQztJQUVoRCxZQUFZO1FBQ1YsT0FBTyxxQ0FBaUIsQ0FBQztJQUMzQixDQUFDO0lBRUssTUFBTSxDQUFDLE9BQTBCOztZQUNyQyxNQUFNLEVBQUUsR0FBRyxJQUFJLGVBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxtQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLDJCQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFM0MsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztnQkFDekIsRUFBRTtnQkFDRixJQUFJO2dCQUNKLFFBQVE7Z0JBQ1IsS0FBSzthQUNOLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTtDQUNGO0FBcEJELDREQW9CQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWQvRG9jdW1lbnRzL2JhbmstYXV0aC9zcmMvbW9kdWxlcy9Vc2Vycy9hcHBsaWNhdGlvbi9DcmVhdGUvQ3JlYXRlVXNlckNvbW1hbmRIYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVVzZXJDb21tYW5kIH0gZnJvbSBcIi4vQ3JlYXRlVXNlckNvbW1hbmRcIjtcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uLy4uL1NoYXJlZC9kb21haW4vQ29tbWFuZEhhbmRsZXJcIjtcbmltcG9ydCB7IFVzZXJDcmVhdG9yIH0gZnJvbSBcIi4vVXNlckNyZWF0b3JcIjtcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vLi4vLi4vU2hhcmVkL2RvbWFpbi9Db21tYW5kXCI7XG5cbmltcG9ydCB7IFVzZXJJZCB9IGZyb20gXCIuLi8uLi9TaGFyZWQvZG9tYWluL1VzZXJJZFwiO1xuaW1wb3J0IHsgVXNlck5hbWUgfSBmcm9tIFwiLi4vLi4vZG9tYWluL1VzZXJOYW1lXCI7XG5pbXBvcnQgeyBVc2VyUGFzc3dvcmQgfSBmcm9tIFwiLi4vLi4vZG9tYWluL1VzZXJQYXNzd29yZFwiO1xuaW1wb3J0IHsgVXNlckVtYWlsIH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9Vc2VyRW1haWxcIjtcblxuZXhwb3J0IGNsYXNzIENyZWF0ZVVzZXJDb21tYW5kSGFuZGxlciBpbXBsZW1lbnRzIENvbW1hbmRIYW5kbGVyPENyZWF0ZVVzZXJDb21tYW5kPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlckNyZWF0b3I6IFVzZXJDcmVhdG9yKSB7fVxuXG4gIHN1YnNjcmliZWRUbygpOiBDb21tYW5kIHtcbiAgICByZXR1cm4gQ3JlYXRlVXNlckNvbW1hbmQ7XG4gIH1cblxuICBhc3luYyBoYW5kbGUoY29tbWFuZDogQ3JlYXRlVXNlckNvbW1hbmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpZCA9IG5ldyBVc2VySWQoY29tbWFuZC5pZCk7XG4gICAgY29uc3QgbmFtZSA9IG5ldyBVc2VyTmFtZShjb21tYW5kLm5hbWUpO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gbmV3IFVzZXJQYXNzd29yZChjb21tYW5kLnBhc3N3b3JkKTtcbiAgICBjb25zdCBlbWFpbCA9IG5ldyBVc2VyRW1haWwoY29tbWFuZC5lbWFpbCk7XG5cbiAgICBhd2FpdCB0aGlzLnVzZXJDcmVhdG9yLnJ1bih7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGVtYWlsLFxuICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=