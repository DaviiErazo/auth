{"file":"/Users/david/Documents/bank-auth/src/modules/Shared/domain/value-object/Uuid.ts","mappings":";;;;;;AAAA,+BAA0B;AAC1B,kEAAqC;AACrC,iEAA8D;AAE9D,MAAa,IAAI;IAGf,YAAY,KAAa;QACvB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAE9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,MAAM;QACX,OAAO,IAAI,IAAI,CAAC,SAAE,EAAE,CAAC,CAAC;IACxB,CAAC;IAEO,iBAAiB,CAAC,EAAU;QAClC,IAAI,CAAC,uBAAQ,CAAC,EAAE,CAAC,EAAE;YACjB,MAAM,IAAI,2CAAoB,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,+BAA+B,EAAE,GAAG,CAAC,CAAC;SAC/F;IACH,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AAtBD,oBAsBC","names":[],"sources":["/Users/david/Documents/bank-auth/src/modules/Shared/domain/value-object/Uuid.ts"],"sourcesContent":["import { v4 } from 'uuid';\nimport validate from 'uuid-validate';\nimport { InvalidArgumentError } from './InvalidArgumentError';\n\nexport class Uuid {\n  readonly value: string;\n\n  constructor(value: string) {\n    this.ensureIsValidUuid(value);\n\n    this.value = value;\n  }\n\n  static random(): Uuid {\n    return new Uuid(v4());\n  }\n\n  private ensureIsValidUuid(id: string): void {\n    if (!validate(id)) {\n      throw new InvalidArgumentError(`<${this.constructor.name}> does not allow the value <${id}>`);\n    }\n  }\n\n  toString(): string {\n    return this.value;\n  }\n}\n"],"version":3}